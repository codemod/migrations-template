name: PR-based Auto-publish

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'recipes/**'
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      comment_id:
        description: 'Comment ID to check for reactions'
        required: true
        type: string
      test_publish:
        description: 'Test the publish workflow'
        required: false
        type: boolean
        default: false

jobs:
  detect-changes:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      codemods: ${{ steps.detect.outputs.codemods }}
      has-changes: ${{ steps.detect.outputs.has-changes }}
      publish-commands: ${{ steps.detect.outputs.publish-commands }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for diff
    
    - name: Detect codemod changes
      id: detect
      run: |
        # Get the base and head commits
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        
        echo "Comparing $BASE_SHA..$HEAD_SHA"
        
        # Find changed codemod directories
        CHANGED_CODEMODS=$(git diff --name-only $BASE_SHA..$HEAD_SHA | grep '^recipes/' | cut -d'/' -f1-2 | sort -u | tr '\n' ' ')
        
        if [ -z "$CHANGED_CODEMODS" ]; then
          echo "has-changes=false" >> $GITHUB_OUTPUT
          echo "No codemod changes detected"
          exit 0
        fi
        
        echo "has-changes=true" >> $GITHUB_OUTPUT
        echo "codemods=$CHANGED_CODEMODS" >> $GITHUB_OUTPUT
        
        echo "Changed codemods: $CHANGED_CODEMODS"
        
        # Generate publish commands for each changed codemod
        PUBLISH_COMMANDS=""
        for codemod_dir in $CHANGED_CODEMODS; do
          if [ -f "$codemod_dir/codemod.yaml" ]; then
            # Extract name and version from codemod.yaml
            NAME=$(grep '^name:' "$codemod_dir/codemod.yaml" | sed 's/name: *//' | tr -d ' ')
            VERSION=$(grep '^version:' "$codemod_dir/codemod.yaml" | sed 's/version: *//' | tr -d ' ')
            
            if [ -n "$NAME" ] && [ -n "$VERSION" ]; then
              # Use codemod publish command instead of git tag
              COMMAND="npx codemod@latest publish $codemod_dir"
              PUBLISH_COMMANDS="${PUBLISH_COMMANDS}${COMMAND}\n"
            fi
          fi
        done
        
        # Store commands as job output
        echo "publish-commands=$PUBLISH_COMMANDS" >> $GITHUB_OUTPUT

  comment-on-pr:
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.has-changes == 'true'
    needs: detect-changes
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for diff
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          // Check if we already commented
          const existingComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Ready to Publish Codemods')
          );
          
          if (existingComment) {
            console.log('Comment already exists, skipping...');
            return;
          }
          
          const codemods = '${{ needs.detect-changes.outputs.codemods }}'.split(' ').filter(Boolean);
          const publishCommands = '${{ needs.detect-changes.outputs.publish-commands }}';
          
          const commentBody = `## üöÄ Ready to Publish Codemods
          
          **Changed codemods:** ${codemods.map(c => `\`${c}\``).join(', ')}
          
          To publish these codemods, a maintainer should comment with: \`/publish\`
          
          **Commands that will be executed:**
          \`\`\`bash
          ${publishCommands}
          \`\`\`
          
          **Note:** Only comments from repository maintainers will trigger the publishing workflow.
          
          ---
          *This comment was automatically generated by the PR-based auto-publish workflow.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody
          });

  handle-comment:
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    
    steps:
    - name: Check if comment is a publish command
      id: check-comment
      run: |
        COMMENT_BODY="${{ github.event.comment.body }}"
        if echo "$COMMENT_BODY" | grep -q "^/publish$"; then
          echo "is-publish-command=true" >> $GITHUB_OUTPUT
        else
          echo "is-publish-command=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check if commenter is a maintainer
      if: steps.check-comment.outputs.is-publish-command == 'true'
      id: check-maintainer
      uses: actions/github-script@v7
      with:
        script: |
          // Get repository collaborators to check if commenter is a maintainer
          const { data: collaborators } = await github.rest.repos.listCollaborators({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const maintainers = collaborators
            .filter(collab => collab.permissions.admin || collab.permissions.maintain)
            .map(collab => collab.login);
          
          const commenter = context.actor;
          
          if (maintainers.includes(commenter)) {
            console.log('Maintainer approved with /publish command!');
            core.setOutput('approved', 'true');
            core.setOutput('approver', commenter);
          } else {
            console.log('Commenter is not a maintainer');
            core.setOutput('approved', 'false');
          }
    
    - name: Checkout code
      if: steps.check-maintainer.outputs.approved == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup pnpm
      if: steps.check-maintainer.outputs.approved == 'true'
      uses: pnpm/action-setup@v4
      with:
        version: latest
    
    - name: Setup Node.js
      if: steps.check-maintainer.outputs.approved == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
    
    - name: Install dependencies
      if: steps.check-maintainer.outputs.approved == 'true'
      run: pnpm install
    
    - name: Check API key configuration
      if: steps.check-maintainer.outputs.approved == 'true'
      run: |
        if [ -z "${{ secrets.CODEMOD_API_KEY }}" ]; then
          echo "‚ùå CODEMOD_API_KEY secret is not configured"
          echo "Please set up your API key in GitHub secrets"
          exit 1
        fi
        echo "‚úÖ API key is configured"
    
    - name: Check for conflicts and auto-fix
      if: steps.check-maintainer.outputs.approved == 'true'
      id: conflict-check
      run: |
        COMMENT_BODY="${{ github.event.comment.body }}"
        
        # Extract codemod directories from the comment
        # First try to get from the "Changed codemods:" line
        CODEMODS=$(echo "$COMMENT_BODY" | grep "Changed codemods:" | sed 's/.*Changed codemods: *//' | sed 's/To publish.*//' | tr -d '`' | tr ',' ' ')
        
        CONFLICTS_FOUND="false"
        FIXED_CONFLICTS=""
        
        for codemod_dir in $CODEMODS; do
          if [ -f "$codemod_dir/codemod.yaml" ]; then
            echo "Checking $codemod_dir for conflicts..."
            
            # Try to publish with dry-run to detect conflicts
            set +e
            PUBLISH_OUTPUT=$(npx codemod@latest publish "$codemod_dir" --dry-run 2>&1)
            PUBLISH_EXIT_CODE=$?
            set -e
            
            # Check for different types of conflicts
            if echo "$PUBLISH_OUTPUT" | grep -q "version.*already exists"; then
              echo "Version conflict detected in $codemod_dir, auto-bumping..."
              
              # Extract current version
              CURRENT_VERSION=$(grep '^version:' "$codemod_dir/codemod.yaml" | sed 's/version: *//' | tr -d ' ')
              
              # Bump patch version
              NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
              
              # Update codemod.yaml
              sed -i.bak "s/^version: .*/version: $NEW_VERSION/" "$codemod_dir/codemod.yaml"
              
              echo "‚úÖ Bumped version from $CURRENT_VERSION to $NEW_VERSION in $codemod_dir"
              FIXED_CONFLICTS="${FIXED_CONFLICTS}Version bumped in $codemod_dir (${CURRENT_VERSION} ‚Üí ${NEW_VERSION})\n"
              
            elif echo "$PUBLISH_OUTPUT" | grep -q "name.*already exists\|already published\|name is taken"; then
              echo "‚ùå Name conflict detected in $codemod_dir - codemod name is already taken by another author"
              CONFLICTS_FOUND="true"
              echo "conflict-details<<EOF" >> $GITHUB_OUTPUT
              echo "Name conflict in $codemod_dir: The codemod name is already published by another author. Please change the 'name' field in $codemod_dir/codemod.yaml to a unique name." >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              
            elif [ $PUBLISH_EXIT_CODE -ne 0 ]; then
              echo "‚ùå Other publishing error in $codemod_dir"
              CONFLICTS_FOUND="true"
              echo "conflict-details<<EOF" >> $GITHUB_OUTPUT
              echo "Publishing error in $codemod_dir: $PUBLISH_OUTPUT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              
            else
              echo "‚úÖ No conflicts in $codemod_dir"
            fi
          fi
        done
        
        echo "conflicts-found=$CONFLICTS_FOUND" >> $GITHUB_OUTPUT
        echo "fixed-conflicts<<EOF" >> $GITHUB_OUTPUT
        echo -e "$FIXED_CONFLICTS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        CODEMOD_API_KEY: ${{ secrets.CODEMOD_API_KEY }}
        CODEMOD_REGISTRY_SCOPE: ${{ vars.CODEMOD_REGISTRY_SCOPE || 'codemod' }}
        CODEMOD_REGISTRY_URL: ${{ vars.CODEMOD_REGISTRY_URL || 'https://registry.codemod.com' }}
    
    - name: Extract and execute publish commands
      if: steps.check-maintainer.outputs.approved == 'true' && steps.conflict-check.outputs.conflicts-found == 'false'
      id: publish
      run: |
        COMMENT_BODY="${{ github.event.comment.body }}"
        
        # Extract commands from the comment
        echo "Extracting commands from comment..."
        
        # Get the bash code block content
        COMMANDS=$(echo "$COMMENT_BODY" | sed -n '/```bash/,/```/p' | sed '1d;$d')
        
        echo "Executing commands:"
        echo "$COMMANDS"
        
        # Execute commands with error handling
        set +e  # Don't exit on error
        echo "$COMMANDS" | bash
        PUBLISH_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        if [ $PUBLISH_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Publishing commands executed successfully!"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Publishing failed with exit code: $PUBLISH_EXIT_CODE"
          echo "success=false" >> $GITHUB_OUTPUT
          echo "exit_code=$PUBLISH_EXIT_CODE" >> $GITHUB_OUTPUT
        fi
      env:
        CODEMOD_API_KEY: ${{ secrets.CODEMOD_API_KEY }}
        CODEMOD_REGISTRY_SCOPE: ${{ vars.CODEMOD_REGISTRY_SCOPE || 'codemod' }}
        CODEMOD_REGISTRY_URL: ${{ vars.CODEMOD_REGISTRY_URL || 'https://registry.codemod.com' }}
    
    - name: Update comment with result
      if: steps.check-maintainer.outputs.approved == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const approver = '${{ steps.check-maintainer.outputs.approver }}';
          const conflictsFound = '${{ steps.conflict-check.outputs.conflicts-found }}' === 'true';
          const conflictDetails = '${{ steps.conflict-check.outputs.conflict-details }}';
          const fixedConflicts = '${{ steps.conflict-check.outputs.fixed-conflicts }}';
          const success = '${{ steps.publish.outputs.success }}' === 'true';
          const exitCode = '${{ steps.publish.outputs.exit_code }}';
          
          let commentBody;
          
          if (conflictsFound) {
            commentBody = `## ‚ö†Ô∏è Publishing Blocked - Conflicts Detected
            
            **Approved by:** @${approver}
            **Blocked at:** ${new Date().toISOString()}
            
            **Issues found:**
            ${conflictDetails}
            
            **Auto-fixes applied:**
            ${fixedConflicts || 'None'}
            
            **To resolve:**
            1. Fix the conflicts (e.g., change codemod name in \`codemod.yaml\`)
            2. Push new changes to this PR
            3. Comment \`/publish\` again
            
            ---
            *This comment was automatically updated by the PR-based auto-publish workflow.*`;
          } else if (success) {
            commentBody = `## ‚úÖ Published Successfully!
            
            **Approved by:** @${approver}
            **Published at:** ${new Date().toISOString()}
            
            **Auto-fixes applied:**
            ${fixedConflicts || 'None'}
            
            The codemods have been successfully published to the registry.
            
            ---
            *This comment was automatically updated by the PR-based auto-publish workflow.*`;
          } else {
            commentBody = `## ‚ùå Publishing Failed
            
            **Approved by:** @${approver}
            **Failed at:** ${new Date().toISOString()}
            **Exit code:** ${exitCode}
            
            The publishing process encountered an error. Common issues:
            
            - **Invalid API key**: Check your \`CODEMOD_API_KEY\` secret
            - **Version conflict**: The codemod version may already exist - try bumping the version in \`codemod.yaml\`
            - **Network issues**: Registry may be temporarily unavailable
            - **Invalid codemod**: Check that your codemod structure is correct
            
            **To retry:**
            1. Fix the issue (e.g., bump version in \`codemod.yaml\`)
            2. Push new changes to this PR
            3. Comment \`/publish\` again
            
            ---
            *This comment was automatically updated by the PR-based auto-publish workflow.*`;
          }
          
          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.event.comment.id,
            body: commentBody
          });
